import { __awaiter, __generator } from "tslib";
import { streamCollector } from "@aws-sdk/fetch-http-handler";
import { toBase64 } from "@aws-sdk/util-base64-browser";
import { toHex } from "@aws-sdk/util-hex-encoding";
import { toUtf8 } from "@aws-sdk/util-utf8-browser";
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
export var sdkStreamMixin = function (stream) {
    var _a, _b;
    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
        var name_1 = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error("Unexpected stream implementation, expect Blob or ReadableStream, got ".concat(name_1));
    }
    var transformed = false;
    var transformToByteArray = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (transformed) {
                        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
                    }
                    transformed = true;
                    return [4, streamCollector(stream)];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    var blobToWebStream = function (blob) {
        if (typeof blob.stream !== "function") {
            throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" +
                "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: function (encoding) { return __awaiter(void 0, void 0, void 0, function () {
            var buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transformToByteArray()];
                    case 1:
                        buf = _a.sent();
                        if (encoding === "base64") {
                            return [2, toBase64(buf)];
                        }
                        else if (encoding === "hex") {
                            return [2, toHex(buf)];
                        }
                        else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
                            return [2, toUtf8(buf)];
                        }
                        else if (typeof TextDecoder === "function") {
                            return [2, new TextDecoder(encoding).decode(buf)];
                        }
                        else {
                            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
                        }
                        return [2];
                }
            });
        }); },
        transformToWebStream: function () {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            transformed = true;
            if (isBlobInstance(stream)) {
                return blobToWebStream(stream);
            }
            else if (isReadableStreamInstance(stream)) {
                return stream;
            }
            else {
                throw new Error("Cannot transform payload to web stream, got ".concat(stream));
            }
        },
    });
};
var isBlobInstance = function (stream) { return typeof Blob === "function" && stream instanceof Blob; };
var isReadableStreamInstance = function (stream) {
    return typeof ReadableStream === "function" && stream instanceof ReadableStream;
};
