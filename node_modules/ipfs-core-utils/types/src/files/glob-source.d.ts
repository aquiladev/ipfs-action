export default globSource;
/**
 * Create an async iterator that yields paths that match requested glob pattern
 *
 * @param {string} cwd - The directory to start matching the pattern in
 * @param {string} pattern - Glob pattern to match
 * @param {Object} [options] - Optional options
 * @param {boolean} [options.hidden] - Include .dot files in matched paths
 * @param {boolean} [options.followSymlinks] - follow symlinks
 * @param {boolean} [options.preserveMode] - preserve mode
 * @param {boolean} [options.preserveMtime] - preserve mtime
 * @param {number} [options.mode] - mode to use - if preserveMode is true this will be ignored
 * @param {import('ipfs-unixfs').MtimeLike} [options.mtime] - mtime to use - if preserveMtime is true this will be ignored
 * @yields {Object} File objects in the form `{ path: String, content: AsyncIterator<Buffer> }`
 */
declare function globSource(cwd: string, pattern: string, options?: {
    hidden?: boolean | undefined;
    followSymlinks?: boolean | undefined;
    preserveMode?: boolean | undefined;
    preserveMtime?: boolean | undefined;
    mode?: number | undefined;
    mtime?: import("ipfs-unixfs/types/src/types").MtimeLike | undefined;
} | undefined): AsyncGenerator<{
    path: string;
    content: fs.ReadStream | undefined;
    mode: number | undefined;
    mtime: import("ipfs-unixfs/types/src/types").MtimeLike | undefined;
}, void, unknown>;
//# sourceMappingURL=glob-source.d.ts.map