import { __awaiter, __generator } from "tslib";
import { streamCollector } from "@aws-sdk/node-http-handler";
import { fromArrayBuffer } from "@aws-sdk/util-buffer-from";
import { Readable } from "stream";
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
export var sdkStreamMixin = function (stream) {
    var _a, _b;
    if (!(stream instanceof Readable)) {
        var name_1 = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error("Unexpected stream implementation, expect Stream.Readable instance, got ".concat(name_1));
    }
    var transformed = false;
    var transformToByteArray = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (transformed) {
                        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
                    }
                    transformed = true;
                    return [4, streamCollector(stream)];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: function (encoding) { return __awaiter(void 0, void 0, void 0, function () {
            var buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transformToByteArray()];
                    case 1:
                        buf = _a.sent();
                        return [2, fromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding)];
                }
            });
        }); },
        transformToWebStream: function () {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            if (stream.readableFlowing !== null) {
                throw new Error("The stream has been consumed by other callbacks.");
            }
            if (typeof Readable.toWeb !== "function") {
                throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
            }
            transformed = true;
            return Readable.toWeb(stream);
        },
    });
};
