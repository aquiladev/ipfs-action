/**
 * @param {import('../../types').Options} config
 */
export function createRemote(config: import('../../types').Options): {
    add: (cid: import("multiformats").CID, { timeout, signal, headers, ...query }: import("ipfs-core-types/src/pin/remote").AddOptions & import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) => Promise<import("ipfs-core-types/src/pin/remote").Pin>;
    ls: ({ timeout, signal, headers, ...query }: import("ipfs-core-types/src/pin/remote").Query & import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) => AsyncIterable<import("ipfs-core-types/src/pin/remote").Pin>;
    rm: ({ timeout, signal, headers, ...query }: import("ipfs-core-types/src/pin/remote").Query & import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) => Promise<void>;
    rmAll: ({ timeout, signal, headers, ...query }: import("ipfs-core-types/src/pin/remote").Query & import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) => Promise<void>;
    service: {
        add: (name: string, options: import("ipfs-core-types/src/pin/remote/service").Credentials & import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) => Promise<void>;
        ls: (options?: {}) => Promise<import("ipfs-core-types/src/pin/remote/service").RemotePinServiceWithStat[]>;
        rm: (name: string, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("../../types").HTTPClientExtraOptions) | undefined) => Promise<void>;
    };
};
//# sourceMappingURL=index.d.ts.map