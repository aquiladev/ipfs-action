import { __assign, __awaiter, __generator, __read } from "tslib";
import { getSuffixForArnEndpoint } from "@aws-sdk/middleware-bucket-endpoint";
import { HttpRequest } from "@aws-sdk/protocol-http";
export var writeGetObjectResponseEndpointMiddleware = function (config) {
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var regionProvider, isCustomEndpoint, disableHostPrefix, region, request, input, hostname, _a, suffix;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        regionProvider = config.region, isCustomEndpoint = config.isCustomEndpoint, disableHostPrefix = config.disableHostPrefix;
                        return [4, regionProvider()];
                    case 1:
                        region = _b.sent();
                        request = args.request, input = args.input;
                        if (!HttpRequest.isInstance(request))
                            return [2, next(__assign({}, args))];
                        hostname = request.hostname;
                        if (hostname.endsWith("s3.amazonaws.com") || hostname.endsWith("s3-external-1.amazonaws.com")) {
                            return [2, next(__assign({}, args))];
                        }
                        if (!isCustomEndpoint) {
                            _a = __read(getSuffixForArnEndpoint(request.hostname), 2), suffix = _a[1];
                            hostname = "s3-object-lambda.".concat(region, ".").concat(suffix);
                        }
                        if (!disableHostPrefix && input.RequestRoute) {
                            hostname = "".concat(input.RequestRoute, ".").concat(hostname);
                        }
                        request.hostname = hostname;
                        context["signing_service"] = "s3-object-lambda";
                        if (config.runtime === "node" && !request.headers["content-length"]) {
                            request.headers["transfer-encoding"] = "chunked";
                        }
                        return [2, next(__assign({}, args))];
                }
            });
        }); };
    };
};
export var writeGetObjectResponseEndpointMiddlewareOptions = {
    relation: "after",
    toMiddleware: "contentLengthMiddleware",
    tags: ["WRITE_GET_OBJECT_RESPONSE", "S3", "ENDPOINT"],
    name: "writeGetObjectResponseEndpointMiddleware",
    override: true,
};
export var getWriteGetObjectResponseEndpointPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(writeGetObjectResponseEndpointMiddleware(config), writeGetObjectResponseEndpointMiddlewareOptions);
    },
}); };
