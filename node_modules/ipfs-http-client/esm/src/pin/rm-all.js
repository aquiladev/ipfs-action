import { CID } from 'multiformats/cid';
import { configure } from '../lib/configure.js';
import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';
import { toUrlSearchParams } from '../lib/to-url-search-params.js';
export const createRmAll = configure(api => {
  async function* rmAll(source, options = {}) {
    for await (const {path, recursive} of normaliseInput(source)) {
      const searchParams = new URLSearchParams(options.searchParams);
      searchParams.append('arg', `${ path }`);
      if (recursive != null)
        searchParams.set('recursive', String(recursive));
      const res = await api.post('pin/rm', {
        signal: options.signal,
        headers: options.headers,
        searchParams: toUrlSearchParams({
          ...options,
          arg: `${ path }`,
          recursive
        })
      });
      for await (const pin of res.ndjson()) {
        if (pin.Pins) {
          yield* pin.Pins.map(cid => CID.parse(cid));
          continue;
        }
        yield CID.parse(pin);
      }
    }
  }
  return rmAll;
});