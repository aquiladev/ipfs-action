'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var multibases = require('ipfs-core-utils/multibases');
var multicodecs = require('ipfs-core-utils/multicodecs');
var multihashes = require('ipfs-core-utils/multihashes');
var dagPB = require('@ipld/dag-pb');
var dagCBOR = require('@ipld/dag-cbor');
var dagJSON = require('@ipld/dag-json');
var identity = require('multiformats/hashes/identity');
var basics = require('multiformats/basics');
var index = require('./bitswap/index.js');
var index$1 = require('./block/index.js');
var index$2 = require('./bootstrap/index.js');
var index$3 = require('./config/index.js');
var index$4 = require('./dag/index.js');
var index$5 = require('./dht/index.js');
var index$6 = require('./diag/index.js');
var index$7 = require('./files/index.js');
var index$8 = require('./key/index.js');
var index$9 = require('./log/index.js');
var index$a = require('./name/index.js');
var index$b = require('./object/index.js');
var index$c = require('./pin/index.js');
var index$d = require('./pubsub/index.js');
var index$e = require('./refs/index.js');
var index$f = require('./repo/index.js');
var index$g = require('./stats/index.js');
var index$h = require('./swarm/index.js');
var add = require('./add.js');
var addAll = require('./add-all.js');
var cat = require('./cat.js');
var commands = require('./commands.js');
var dns = require('./dns.js');
var getEndpointConfig = require('./get-endpoint-config.js');
var get = require('./get.js');
var id = require('./id.js');
var isOnline = require('./is-online.js');
var ls = require('./ls.js');
var mount = require('./mount.js');
var ping = require('./ping.js');
var resolve = require('./resolve.js');
var start = require('./start.js');
var stop = require('./stop.js');
var version = require('./version.js');
var globSourceImport = require('ipfs-utils/src/files/glob-source.js');
var cid = require('multiformats/cid');
var multiaddr = require('multiaddr');
var urlSource_js = require('ipfs-utils/src/files/url-source.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);
var dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);
var globSourceImport__default = /*#__PURE__*/_interopDefaultLegacy(globSourceImport);
var urlSource_js__default = /*#__PURE__*/_interopDefaultLegacy(urlSource_js);

function create(options = {}) {
  const id$1 = {
    name: identity.identity.name,
    code: identity.identity.code,
    encode: id => id,
    decode: id => id
  };
  const multibaseCodecs = Object.values(basics.bases);
  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));
  const multibases$1 = new multibases.Multibases({
    bases: multibaseCodecs,
    loadBase: options.ipld && options.ipld.loadBase
  });
  const blockCodecs = Object.values(basics.codecs);
  [
    dagPB__namespace,
    dagCBOR__namespace,
    dagJSON__namespace,
    id$1
  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));
  const multicodecs$1 = new multicodecs.Multicodecs({
    codecs: blockCodecs,
    loadCodec: options.ipld && options.ipld.loadCodec
  });
  const multihashHashers = Object.values(basics.hashes);
  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));
  const multihashes$1 = new multihashes.Multihashes({
    hashers: multihashHashers,
    loadHasher: options.ipld && options.ipld.loadHasher
  });
  const client = {
    add: add.createAdd(options),
    addAll: addAll.createAddAll(options),
    bitswap: index.createBitswap(options),
    block: index$1.createBlock(options),
    bootstrap: index$2.createBootstrap(options),
    cat: cat.createCat(options),
    commands: commands.createCommands(options),
    config: index$3.createConfig(options),
    dag: index$4.createDag(multicodecs$1, options),
    dht: index$5.createDht(options),
    diag: index$6.createDiag(options),
    dns: dns.createDns(options),
    files: index$7.createFiles(options),
    get: get.createGet(options),
    getEndpointConfig: getEndpointConfig.createGetEndpointConfig(options),
    id: id.createId(options),
    isOnline: isOnline.createIsOnline(options),
    key: index$8.createKey(options),
    log: index$9.createLog(options),
    ls: ls.createLs(options),
    mount: mount.createMount(options),
    name: index$a.createName(options),
    object: index$b.createObject(multicodecs$1, options),
    pin: index$c.createPin(options),
    ping: ping.createPing(options),
    pubsub: index$d.createPubsub(options),
    refs: index$e.createRefs(options),
    repo: index$f.createRepo(options),
    resolve: resolve.createResolve(options),
    start: start.createStart(options),
    stats: index$g.createStats(options),
    stop: stop.createStop(options),
    swarm: index$h.createSwarm(options),
    version: version.createVersion(options),
    bases: multibases$1,
    codecs: multicodecs$1,
    hashers: multihashes$1
  };
  return client;
}
const globSource = globSourceImport__default["default"];

Object.defineProperty(exports, 'CID', {
  enumerable: true,
  get: function () { return cid.CID; }
});
Object.defineProperty(exports, 'multiaddr', {
  enumerable: true,
  get: function () { return multiaddr.Multiaddr; }
});
Object.defineProperty(exports, 'urlSource', {
  enumerable: true,
  get: function () { return urlSource_js__default["default"]; }
});
exports.create = create;
exports.globSource = globSource;
