import { __assign, __asyncValues, __awaiter, __extends, __generator, __read } from "tslib";
import { AbortController } from "@aws-sdk/abort-controller";
import { CompleteMultipartUploadCommand, CreateMultipartUploadCommand, PutObjectCommand, PutObjectTaggingCommand, UploadPartCommand, } from "@aws-sdk/client-s3";
import { extendedEncodeURIComponent } from "@aws-sdk/smithy-client";
import { EventEmitter } from "events";
import { byteLength } from "./bytelength";
import { getChunk } from "./chunker";
var MIN_PART_SIZE = 1024 * 1024 * 5;
var Upload = (function (_super) {
    __extends(Upload, _super);
    function Upload(options) {
        var _this = _super.call(this) || this;
        _this.MAX_PARTS = 10000;
        _this.queueSize = 4;
        _this.partSize = MIN_PART_SIZE;
        _this.leavePartsOnError = false;
        _this.tags = [];
        _this.concurrentUploaders = [];
        _this.uploadedParts = [];
        _this.isMultiPart = true;
        _this.queueSize = options.queueSize || _this.queueSize;
        _this.partSize = options.partSize || _this.partSize;
        _this.leavePartsOnError = options.leavePartsOnError || _this.leavePartsOnError;
        _this.tags = options.tags || _this.tags;
        _this.client = options.client;
        _this.params = options.params;
        _this.__validateInput();
        _this.totalBytes = byteLength(_this.params.Body);
        _this.bytesUploadedSoFar = 0;
        _this.abortController = new AbortController();
        return _this;
    }
    Upload.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.abortController.abort();
                return [2];
            });
        });
    };
    Upload.prototype.done = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Promise.race([this.__doMultipartUpload(), this.__abortTimeout(this.abortController.signal)])];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Upload.prototype.on = function (event, listener) {
        this.uploadEvent = event;
        return _super.prototype.on.call(this, event, listener);
    };
    Upload.prototype.__uploadUsingPut = function (dataPart) {
        return __awaiter(this, void 0, void 0, function () {
            var params, requestHandler, eventEmitter, uploadEventListener, _a, putResult, endpoint, locationKey, locationBucket, Location, totalSize;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.isMultiPart = false;
                        params = __assign(__assign({}, this.params), { Body: dataPart.data });
                        requestHandler = this.client.config.requestHandler;
                        eventEmitter = requestHandler instanceof EventEmitter ? requestHandler : null;
                        uploadEventListener = function (event) {
                            _this.bytesUploadedSoFar = event.loaded;
                            _this.totalBytes = event.total;
                            _this.__notifyProgress({
                                loaded: _this.bytesUploadedSoFar,
                                total: _this.totalBytes,
                                part: dataPart.partNumber,
                                Key: _this.params.Key,
                                Bucket: _this.params.Bucket,
                            });
                        };
                        if (eventEmitter !== null) {
                            eventEmitter.on("xhr.upload.progress", uploadEventListener);
                        }
                        return [4, Promise.all([
                                this.client.send(new PutObjectCommand(params)),
                                this.client.config.endpoint(),
                            ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), putResult = _a[0], endpoint = _a[1];
                        if (eventEmitter !== null) {
                            eventEmitter.off("xhr.upload.progress", uploadEventListener);
                        }
                        locationKey = this.params
                            .Key.split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/");
                        locationBucket = extendedEncodeURIComponent(this.params.Bucket);
                        Location = this.client.config.forcePathStyle
                            ? "".concat(endpoint.protocol, "//").concat(endpoint.hostname, "/").concat(locationBucket, "/").concat(locationKey)
                            : "".concat(endpoint.protocol, "//").concat(locationBucket, ".").concat(endpoint.hostname, "/").concat(locationKey);
                        this.singleUploadResult = __assign(__assign({}, putResult), { Bucket: this.params.Bucket, Key: this.params.Key, Location: Location });
                        totalSize = byteLength(dataPart.data);
                        this.__notifyProgress({
                            loaded: totalSize,
                            total: totalSize,
                            part: 1,
                            Key: this.params.Key,
                            Bucket: this.params.Bucket,
                        });
                        return [2];
                }
            });
        });
    };
    Upload.prototype.__createMultipartUpload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var createCommandParams, createMultipartUploadResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.createMultiPartPromise) {
                            createCommandParams = __assign(__assign({}, this.params), { Body: undefined });
                            this.createMultiPartPromise = this.client.send(new CreateMultipartUploadCommand(createCommandParams));
                        }
                        return [4, this.createMultiPartPromise];
                    case 1:
                        createMultipartUploadResult = _a.sent();
                        this.uploadId = createMultipartUploadResult.UploadId;
                        return [2];
                }
            });
        });
    };
    Upload.prototype.__doConcurrentUpload = function (dataFeeder) {
        var dataFeeder_1, dataFeeder_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var _loop_1, this_1, state_1, e_1_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 6, 7, 12]);
                        _loop_1 = function () {
                            var dataPart, _c, partSize_1, requestHandler, eventEmitter, lastSeenBytes_1, uploadEventListener, partResult, e_2;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        dataPart = dataFeeder_1_1.value;
                                        if (this_1.uploadedParts.length > this_1.MAX_PARTS) {
                                            throw new Error("Exceeded ".concat(this_1.MAX_PARTS, " as part of the upload to ").concat(this_1.params.Key, " and ").concat(this_1.params.Bucket, "."));
                                        }
                                        _d.label = 1;
                                    case 1:
                                        _d.trys.push([1, 7, , 8]);
                                        if (this_1.abortController.signal.aborted) {
                                            return [2, { value: void 0 }];
                                        }
                                        if (!(dataPart.partNumber === 1 && dataPart.lastPart)) return [3, 3];
                                        _c = {};
                                        return [4, this_1.__uploadUsingPut(dataPart)];
                                    case 2: return [2, (_c.value = _d.sent(), _c)];
                                    case 3:
                                        if (!!this_1.uploadId) return [3, 5];
                                        return [4, this_1.__createMultipartUpload()];
                                    case 4:
                                        _d.sent();
                                        if (this_1.abortController.signal.aborted) {
                                            return [2, { value: void 0 }];
                                        }
                                        _d.label = 5;
                                    case 5:
                                        partSize_1 = byteLength(dataPart.data) || 0;
                                        requestHandler = this_1.client.config.requestHandler;
                                        eventEmitter = requestHandler instanceof EventEmitter ? requestHandler : null;
                                        lastSeenBytes_1 = 0;
                                        uploadEventListener = function (event, request) {
                                            var requestPartSize = Number(request.query["partNumber"]) || -1;
                                            if (requestPartSize !== dataPart.partNumber) {
                                                return;
                                            }
                                            if (event.total && partSize_1) {
                                                _this.bytesUploadedSoFar += event.loaded - lastSeenBytes_1;
                                                lastSeenBytes_1 = event.loaded;
                                            }
                                            _this.__notifyProgress({
                                                loaded: _this.bytesUploadedSoFar,
                                                total: _this.totalBytes,
                                                part: dataPart.partNumber,
                                                Key: _this.params.Key,
                                                Bucket: _this.params.Bucket,
                                            });
                                        };
                                        if (eventEmitter !== null) {
                                            eventEmitter.on("xhr.upload.progress", uploadEventListener);
                                        }
                                        return [4, this_1.client.send(new UploadPartCommand(__assign(__assign({}, this_1.params), { UploadId: this_1.uploadId, Body: dataPart.data, PartNumber: dataPart.partNumber })))];
                                    case 6:
                                        partResult = _d.sent();
                                        if (eventEmitter !== null) {
                                            eventEmitter.off("xhr.upload.progress", uploadEventListener);
                                        }
                                        if (this_1.abortController.signal.aborted) {
                                            return [2, { value: void 0 }];
                                        }
                                        if (!partResult.ETag) {
                                            throw new Error("Part ".concat(dataPart.partNumber, " is missing ETag in UploadPart response. Missing Bucket CORS configuration for ETag header?"));
                                        }
                                        this_1.uploadedParts.push(__assign(__assign(__assign(__assign({ PartNumber: dataPart.partNumber, ETag: partResult.ETag }, (partResult.ChecksumCRC32 && { ChecksumCRC32: partResult.ChecksumCRC32 })), (partResult.ChecksumCRC32C && { ChecksumCRC32C: partResult.ChecksumCRC32C })), (partResult.ChecksumSHA1 && { ChecksumSHA1: partResult.ChecksumSHA1 })), (partResult.ChecksumSHA256 && { ChecksumSHA256: partResult.ChecksumSHA256 })));
                                        if (eventEmitter === null) {
                                            this_1.bytesUploadedSoFar += partSize_1;
                                        }
                                        this_1.__notifyProgress({
                                            loaded: this_1.bytesUploadedSoFar,
                                            total: this_1.totalBytes,
                                            part: dataPart.partNumber,
                                            Key: this_1.params.Key,
                                            Bucket: this_1.params.Bucket,
                                        });
                                        return [3, 8];
                                    case 7:
                                        e_2 = _d.sent();
                                        if (!this_1.uploadId) {
                                            throw e_2;
                                        }
                                        if (this_1.leavePartsOnError) {
                                            throw e_2;
                                        }
                                        return [3, 8];
                                    case 8: return [2];
                                }
                            });
                        };
                        this_1 = this;
                        dataFeeder_1 = __asyncValues(dataFeeder);
                        _b.label = 1;
                    case 1: return [4, dataFeeder_1.next()];
                    case 2:
                        if (!(dataFeeder_1_1 = _b.sent(), !dataFeeder_1_1.done)) return [3, 5];
                        return [5, _loop_1()];
                    case 3:
                        state_1 = _b.sent();
                        if (typeof state_1 === "object")
                            return [2, state_1.value];
                        _b.label = 4;
                    case 4: return [3, 1];
                    case 5: return [3, 12];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3, 12];
                    case 7:
                        _b.trys.push([7, , 10, 11]);
                        if (!(dataFeeder_1_1 && !dataFeeder_1_1.done && (_a = dataFeeder_1.return))) return [3, 9];
                        return [4, _a.call(dataFeeder_1)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9: return [3, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7];
                    case 11: return [7];
                    case 12: return [2];
                }
            });
        });
    };
    Upload.prototype.__doMultipartUpload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dataFeeder, index, currentUpload, result, uploadCompleteParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataFeeder = getChunk(this.params.Body, this.partSize);
                        for (index = 0; index < this.queueSize; index++) {
                            currentUpload = this.__doConcurrentUpload(dataFeeder);
                            this.concurrentUploaders.push(currentUpload);
                        }
                        return [4, Promise.all(this.concurrentUploaders)];
                    case 1:
                        _a.sent();
                        if (this.abortController.signal.aborted) {
                            throw Object.assign(new Error("Upload aborted."), { name: "AbortError" });
                        }
                        if (!this.isMultiPart) return [3, 3];
                        this.uploadedParts.sort(function (a, b) { return a.PartNumber - b.PartNumber; });
                        uploadCompleteParams = __assign(__assign({}, this.params), { Body: undefined, UploadId: this.uploadId, MultipartUpload: {
                                Parts: this.uploadedParts,
                            } });
                        return [4, this.client.send(new CompleteMultipartUploadCommand(uploadCompleteParams))];
                    case 2:
                        result = _a.sent();
                        return [3, 4];
                    case 3:
                        result = this.singleUploadResult;
                        _a.label = 4;
                    case 4:
                        if (!this.tags.length) return [3, 6];
                        return [4, this.client.send(new PutObjectTaggingCommand(__assign(__assign({}, this.params), { Tagging: {
                                    TagSet: this.tags,
                                } })))];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2, result];
                }
            });
        });
    };
    Upload.prototype.__notifyProgress = function (progress) {
        if (this.uploadEvent) {
            this.emit(this.uploadEvent, progress);
        }
    };
    Upload.prototype.__abortTimeout = function (abortSignal) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        abortSignal.onabort = function () {
                            var abortError = new Error("Upload aborted.");
                            abortError.name = "AbortError";
                            reject(abortError);
                        };
                    })];
            });
        });
    };
    Upload.prototype.__validateInput = function () {
        if (!this.params) {
            throw new Error("InputError: Upload requires params to be passed to upload.");
        }
        if (!this.client) {
            throw new Error("InputError: Upload requires a AWS client to do uploads with.");
        }
        if (this.partSize < MIN_PART_SIZE) {
            throw new Error("EntityTooSmall: Your proposed upload partsize [".concat(this.partSize, "] is smaller than the minimum allowed size [").concat(MIN_PART_SIZE, "] (5MB)"));
        }
        if (this.queueSize < 1) {
            throw new Error("Queue size: Must have at least one uploading queue.");
        }
    };
    return Upload;
}(EventEmitter));
export { Upload };
